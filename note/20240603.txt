Ajax
Asychronous JavaScript XML
자바스크립트를 이용한 백그라운드 통신 기술(비동기 통신)
웹 페이지 전체를 다시 로딩하지 않고도 일부분만 갱신

fetch api
- Promise 기반으로 구성되어 있어 비동기 처리에 잘 맞는 형식
- then이나 catch와 같은 체인 형태로 작성할 수 있다는 장점이 있음
		
- fetch API의 경우 JS의 기본 기능이기 때문에 별다른 라이브러리가 필요하지 않음
- fetch 문법
- fetch(url, 옵션)
- .then(res => res.text())
- .then(text => console.log(text))
		
- 기본적으로 http 메서드 중 GET으로 동작함
- fetch를 통해해 ajax를 호출 시 해당 주소에 요청을 보낸다음 응답객체(Promise Object Response)를 받음
- then에서 응답을 받고 처리함
		
- response.status - http 상태코드
- response.ok - http 상태코드가 200 ~ 299 사이일 경우 true
- response.boyd - 내용
- response.text() - 응답을 읽고 텍스트를 반환
- response.json() - 응답을 JSON 형태로 파싱
- response.formData() - 응답을 FormData 객체 형태로 반환
		
- 조회하기(GET 방식)
- 단순히 원격 API에 있는 데이터를 가져올 때 쓰임
- fetch 함수는 default로 GET 방식으로 작동하고 옵션 인자가 필요 X

- 추가하기(POST 방식)
- 폼 등을 사용해서 데이터를 만들어 보낼 때 보내는 데이터의 양이 많거나 비밀번호 등 개인정보를 보낼때 POST 메서드를 사용

JSON
- JavaScript Object Notation 표기법
- 서로 다른 프로그램에서 데이터를 교화하기 쉽도록 규격화된 표기법

문법
{'데이터 이름' : '값''}

- 값에 넣을 수 있는 데이터
- 숫자 : 정수, 실수, 지수
- 문자열
- 논리형 : true, false
- 객체
- 배열
- null

